{"version":3,"file":"static/js/177.31c0dcc3.chunk.js","mappings":"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","sources":["components/WeatherCard/WeatherCard.styled.js","utils/getImage.js","components/Description/Description.styled.js","components/Description/Description.js","utils/getDate.js","components/DailyCard/DailyCard.styled.js","utils/getUserTime.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","components/DailyCard/DailyCard.js","components/WeatherCard/WeatherCard.js","redux/weather/selectors.js"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Card = styled.li`\r\n  position: relative;\r\n  padding: 40px 35px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  border-radius: 20px;\r\n\r\n  background: linear-gradient(135deg, #00feba, #5b548a);\r\n  color: #fff;\r\n`;\r\n\r\nexport const Temperature = styled.h2``;\r\n\r\nexport const City = styled.h3``;\r\n\r\nexport const Link = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 1em;\r\n  right: 1em;\r\n\r\n  &:hover {\r\n    border-radius: 20px;\r\n    transition: background-color 0.3s;\r\n    background-color: red;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\n","import humidity from \"../images/humidity.png\";\r\nimport windIcon from \"../images/windIcon.png\";\r\nimport drizzle from \"../images/drizzle.png\";\r\nimport rain from \"../images/rain.png\";\r\nimport clouds from \"../images/clouds.png\";\r\nimport mist from \"../images/mist.png\";\r\nimport clear from \"../images/clear.png\";\r\nimport snow from \"../images/snow.png\";\r\n\r\nconst getImage = (weather) => {\r\n  const specificPath = weather && weather[0].main;\r\n  let weatherIcon = \"\";\r\n  if (specificPath === \"Clouds\") {\r\n    weatherIcon = clouds;\r\n  } else if (specificPath === \"Rain\") {\r\n    weatherIcon = rain;\r\n  } else if (specificPath === \"Clear\") {\r\n    weatherIcon = clear;\r\n  } else if (specificPath === \"Drizzle\") {\r\n    weatherIcon = drizzle;\r\n  } else if (specificPath === \"Mist\") {\r\n    weatherIcon = mist;\r\n  } else if (specificPath === \"Humidity\") {\r\n    weatherIcon = humidity;\r\n  } else if (specificPath === \"Snow\") {\r\n    weatherIcon = snow;\r\n  } else if (specificPath === \"Wind\") {\r\n    weatherIcon = windIcon;\r\n  }\r\n\r\n  return weatherIcon;\r\n};\r\n\r\nexport default getImage;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.ul`\r\n  margin-top: 20px;\r\n  gap: 40px;\r\n  display: flex;\r\n`;\r\n\r\nexport const Content = styled.li`\r\n  display: flex;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport const TextWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Text = styled.p``;\r\n","import {\r\n  Container,\r\n  Content,\r\n  Image,\r\n  Text,\r\n  TextWrapper,\r\n} from \"./Description.styled\";\r\n\r\nimport humidity from \"../../images/humidity.png\";\r\nimport windIcon from \"../../images/windIcon.png\";\r\n\r\nconst Description = ({ main, wind }) => {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <Image src={humidity} width={30} height={30} />\r\n        <TextWrapper>\r\n          <Text>{main.humidity}%</Text>\r\n          <Text>Вологість</Text>\r\n        </TextWrapper>\r\n      </Content>\r\n      <Content>\r\n        <Image src={windIcon} width={30} height={30} />\r\n        <TextWrapper>\r\n          <Text>{wind.speed} км/год</Text>\r\n          <Text>Швидкість вітру</Text>\r\n        </TextWrapper>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","function addLeadingZero(d) {\r\n  return d < 10 ? \"0\" + d : d;\r\n}\r\n\r\nexport const getDays = (list) => {\r\n  const weatherForecast = [...list].splice(1, list.length - 1);\r\n\r\n  const getForecastExceptCurrent = weatherForecast.filter(\r\n    (_, index, array) =>\r\n      new Date(array[index]?.dt * 1000).getDay() !==\r\n      new Date(array[index + 1]?.dt * 1000).getDay()\r\n  );\r\n\r\n  return getForecastExceptCurrent;\r\n};\r\n\r\nexport default getDays;\r\n\r\nexport const getForecastByDay = (dt, list) => {\r\n  const year = new Date(dt * 1000).getFullYear();\r\n  const month = addLeadingZero(new Date(dt * 1000).getMonth() + 1);\r\n  const day = new Date(dt * 1000).getDate();\r\n\r\n  const date = `${year}-${month}-${day}`;\r\n\r\n  const findForecast = list.filter(({ dt_txt }) => dt_txt.includes(date));\r\n\r\n  return findForecast;\r\n};\r\n\r\nexport const getMinutes = (dt) => {\r\n  const hours = addLeadingZero(new Date(dt * 1000).getHours());\r\n\r\n  return `${hours}:00`;\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Card = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  background-color: grey;\r\n  border-radius: 20px;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  cursor: pointer;\r\n`;\r\n","const days = [\r\n  \"Понеділок\",\r\n  \"Вівторок\",\r\n  \"Середа\",\r\n  \"Четвер\",\r\n  \"П'ятниця\",\r\n  \"Субота\",\r\n  \"Неділя\",\r\n];\r\n\r\nconst getUserTime = (dt) => {\r\n  const time = new Date(dt * 1000);\r\n\r\n  const day = days[time.getDay()];\r\n\r\n  return day;\r\n};\r\n\r\nexport default getUserTime;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Overlay = styled.div`\r\n  position: absolute;\r\n  z-index: 9;\r\n  top: 10rem;\r\n  left: 0;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n\r\n  &:hover {\r\n    border-radius: 20px;\r\n    transition: background-color 0.3s;\r\n    background-color: red;\r\n  }\r\n`;\r\n\r\nexport const Background = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  padding: 40px 10px;\r\n\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  gap: 10px;\r\n  background-color: #ffffff;\r\n  border: 1px solid #bebebe;\r\n  border-radius: 2px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  border: 1px solid #bebebe;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 3px;\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  color: black;\r\n`;\r\n","import { Overlay, Background, Link, Text, Item, List } from \"./Modal.styled\";\r\n\r\nimport getImage from \"../../utils/getImage\";\r\nimport { GrClose } from \"react-icons/gr\";\r\nimport { getForecastByDay, getMinutes } from \"../../utils/getDate\";\r\n\r\nconst Modal = ({ list, dt, setIsModalOpen }) => {\r\n  const findForecast = getForecastByDay(dt, list);\r\n\r\n  return (\r\n    <Overlay>\r\n      <Background>\r\n        <Link onClick={() => setIsModalOpen(false)}>\r\n          <GrClose />\r\n        </Link>\r\n        <List>\r\n          {findForecast.map(({ dt, main, weather }, index, array) => {\r\n            const weatherIcon = getImage(weather);\r\n\r\n            return (\r\n              <Item key={dt}>\r\n                <img\r\n                  alt=\"weather-icon\"\r\n                  src={weatherIcon}\r\n                  width={30}\r\n                  height={30}\r\n                />\r\n                <Text style={{ textAlign: \"center\" }}>\r\n                  {`${main.temp.toFixed()}°C`}\r\n                </Text>\r\n                <Text>{getMinutes(dt)}</Text>\r\n                <Text>{weather[0].description}</Text>\r\n              </Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Background>\r\n    </Overlay>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Card } from \"./DailyCard.styled\";\r\nimport getImage from \"../../utils/getImage\";\r\nimport getUserTime from \"../../utils/getUserTime\";\r\nimport { selectIsModalOpen } from \"../../redux/weather/selectors\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport { openModal } from \"../../redux/weather/weatherSlice\";\r\n\r\nconst DailyCard = ({ dt, main, weather, list }) => {\r\n  const weatherIcon = useMemo(() => getImage(weather), [weather]);\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState();\r\n\r\n  return (\r\n    <>\r\n      <Card key={dt}>\r\n        <img alt=\"weather-icon\" src={weatherIcon} width={30} height={30} />\r\n        <p style={{ textAlign: \"center\" }}>{main.temp.toFixed()}°C</p>\r\n        <p>{getUserTime(dt)}</p>\r\n        <button onClick={() => setIsModalOpen(true)}>Modal!</button>\r\n        {isModalOpen && (\r\n          <Modal list={list} dt={dt} setIsModalOpen={setIsModalOpen} />\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DailyCard;\r\n","import { HiOutlineTrash } from \"react-icons/hi\";\r\nimport { Card, City, Link, List, Temperature } from \"./WeatherCard.styled\";\r\nimport getImage from \"../../utils/getImage.js\";\r\nimport { Description } from \"../Description\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteCard } from \"../../redux/weather/weatherSlice\";\r\nimport { memo, useMemo } from \"react\";\r\nimport { getDays } from \"../../utils/getDate\";\r\nimport DailyCard from \"../DailyCard/DailyCard\";\r\n\r\nconst WeatherCard = memo(\r\n  ({ dt, name, weather, main, wind, list, city, idx, icon }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const weatherIcon = useMemo(() => getImage(weather), [weather]);\r\n    const listOfDays = useMemo(() => getDays(list), [list]);\r\n\r\n    const onClick = () => {\r\n      return dispatch(deleteCard(idx));\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Card key={dt}>\r\n          <img src={weatherIcon} alt=\"weather-icon\" width={100} />\r\n          <Temperature>{main?.temp.toFixed()}°C</Temperature>\r\n          <City>{city ? city : name}</City>\r\n          <Description main={main} wind={wind} />\r\n          <List>\r\n            {listOfDays.map(({ dt, main, weather }) => {\r\n              return (\r\n                <DailyCard\r\n                  key={dt}\r\n                  dt={dt}\r\n                  main={main}\r\n                  weather={weather}\r\n                  list={list}\r\n                />\r\n              );\r\n            })}\r\n          </List>\r\n\r\n          {icon ? (\r\n            <Link onClick={onClick}>\r\n              <HiOutlineTrash size={25} />\r\n            </Link>\r\n          ) : null}\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default WeatherCard;\r\n","export const selectList = (state) => state.weather.mainForecast;\r\nexport const selectCityList = (state) => state.weather.cityForecast;\r\nexport const selectCities = (state) => state.weather.cities;\r\nexport const selectMainCity = (state) => state.weather.mainCity;\r\nexport const selectIsError = (state) => state.weather.error;\r\n"],"names":["Card","styled","li","_templateObject","_taggedTemplateLiteral","Temperature","h2","_templateObject2","City","h3","_templateObject3","Link","a","_templateObject4","List","ul","_templateObject5","weather","specificPath","main","weatherIcon","clouds","drizzle","mist","humidity","snow","windIcon","Container","Content","Image","img","TextWrapper","div","Text","p","_ref","wind","_jsxs","children","_jsx","src","width","height","speed","addLeadingZero","d","getDays","list","_toConsumableArray","splice","length","filter","_","index","array","_array$index","_array","Date","dt","getDay","getMinutes","hours","getHours","concat","days","time","Overlay","Background","Item","_templateObject6","setIsModalOpen","findForecast","year","getFullYear","month","getMonth","day","getDate","date","dt_txt","includes","getForecastByDay","onClick","GrClose","map","_ref2","getImage","alt","style","textAlign","temp","toFixed","description","useMemo","_useState","useState","_useState2","_slicedToArray","isModalOpen","_Fragment","getUserTime","Modal","memo","name","city","idx","icon","dispatch","useDispatch","listOfDays","Description","DailyCard","deleteCard","HiOutlineTrash","size","selectList","state","mainForecast","selectCityList","cityForecast","selectCities","cities"],"sourceRoot":""}