{"version":3,"file":"static/js/927.ae690dd1.chunk.js","mappings":"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","sources":["components/WeatherCard/WeatherCard.styled.js","components/DailyCard/DailyCard.styled.js","utils/getImage.js","utils/getUserTime.js","components/DailyCard/DailyCard.js","components/Description/Description.styled.js","components/Description/Description.js","utils/getDays.js","components/WeatherCard/WeatherCard.js","redux/weather/selectors.js"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Card = styled.li`\r\n  position: relative;\r\n  padding: 40px 35px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  border-radius: 20px;\r\n\r\n  background: linear-gradient(135deg, #00feba, #5b548a);\r\n  color: #fff;\r\n`;\r\n\r\nexport const Temperature = styled.h2``;\r\n\r\nexport const City = styled.h3``;\r\n\r\nexport const Link = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 1em;\r\n  right: 1em;\r\n\r\n  &:hover {\r\n    border-radius: 20px;\r\n    transition: background-color 0.3s;\r\n    background-color: red;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Card = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  background-color: grey;\r\n  border-radius: 20px;\r\n  padding: 20px;\r\n`;\r\n","import humidity from \"../images/humidity.png\";\r\nimport windIcon from \"../images/windIcon.png\";\r\nimport drizzle from \"../images/drizzle.png\";\r\nimport rain from \"../images/rain.png\";\r\nimport clouds from \"../images/clouds.png\";\r\nimport mist from \"../images/mist.png\";\r\nimport clear from \"../images/clear.png\";\r\nimport snow from \"../images/snow.png\";\r\n\r\nconst getImage = (weather) => {\r\n  const specificPath = weather && weather[0].main;\r\n  let weatherIcon = \"\";\r\n  if (specificPath === \"Clouds\") {\r\n    weatherIcon = clouds;\r\n  } else if (specificPath === \"Rain\") {\r\n    weatherIcon = rain;\r\n  } else if (specificPath === \"Clear\") {\r\n    weatherIcon = clear;\r\n  } else if (specificPath === \"Drizzle\") {\r\n    weatherIcon = drizzle;\r\n  } else if (specificPath === \"Mist\") {\r\n    weatherIcon = mist;\r\n  } else if (specificPath === \"Humidity\") {\r\n    weatherIcon = humidity;\r\n  } else if (specificPath === \"Snow\") {\r\n    weatherIcon = snow;\r\n  } else if (specificPath === \"Wind\") {\r\n    weatherIcon = windIcon;\r\n  }\r\n\r\n  return weatherIcon;\r\n};\r\n\r\nexport default getImage;\r\n","const days = [\r\n  \"Понеділок\",\r\n  \"Вівторок\",\r\n  \"Середа\",\r\n  \"Четвер\",\r\n  \"П'ятниця\",\r\n  \"Субота\",\r\n  \"Неділя\",\r\n];\r\n\r\nconst getUserTime = (dt) => {\r\n  const time = new Date(dt * 1000);\r\n\r\n  const day = days[time.getDay()];\r\n\r\n  return day;\r\n};\r\n\r\nexport default getUserTime;\r\n","import { Card } from \"./DailyCard.styled\";\r\n\r\nimport getImage from \"../../utils/getImage\";\r\nimport getUserTime from \"../../utils/getUserTime\";\r\nimport { useMemo } from \"react\";\r\n\r\nconst DailyCard = ({ dt, main, weather }) => {\r\n  const weatherIcon = useMemo(() => getImage(weather), [weather]);\r\n  return (\r\n    <>\r\n      <Card key={dt}>\r\n        <img alt=\"weather-icon\" src={weatherIcon} width={30} height={30} />\r\n        <p style={{ textAlign: \"center\" }}>{main.temp.toFixed()}°C</p>\r\n        <p>{getUserTime(dt)}</p>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DailyCard;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.ul`\r\n  margin-top: 20px;\r\n  gap: 40px;\r\n  display: flex;\r\n`;\r\n\r\nexport const Content = styled.li`\r\n  display: flex;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport const TextWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Text = styled.p``;\r\n","import {\r\n  Container,\r\n  Content,\r\n  Image,\r\n  Text,\r\n  TextWrapper,\r\n} from \"./Description.styled\";\r\n\r\nimport humidity from \"../../images/humidity.png\";\r\nimport windIcon from \"../../images/windIcon.png\";\r\n\r\nconst Description = ({ main, wind }) => {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <Image src={humidity} width={30} height={30} />\r\n        <TextWrapper>\r\n          <Text>{main.humidity}%</Text>\r\n          <Text>Вологість</Text>\r\n        </TextWrapper>\r\n      </Content>\r\n      <Content>\r\n        <Image src={windIcon} width={30} height={30} />\r\n        <TextWrapper>\r\n          <Text>{wind.speed} км/год</Text>\r\n          <Text>Швидкість вітру</Text>\r\n        </TextWrapper>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","const getDays = (list) => {\r\n  const weatherForecast = [...list].splice(1, list.length - 1);\r\n  const getDays = [];\r\n\r\n  weatherForecast.forEach((_, index, array) => {\r\n    if (\r\n      new Date(array[index]?.dt * 1000).getDay() !==\r\n      new Date(array[index + 1]?.dt * 1000).getDay()\r\n    ) {\r\n      getDays.push(array[index]);\r\n    }\r\n  });\r\n\r\n  return getDays;\r\n};\r\n\r\nexport default getDays;\r\n","import { HiOutlineTrash } from \"react-icons/hi\";\r\nimport { Card, City, Link, List, Temperature } from \"./WeatherCard.styled\";\r\nimport { DailyCard } from \"../DailyCard\";\r\nimport getImage from \"../../utils/getImage.js\";\r\nimport { Description } from \"../Description\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteCard } from \"../../redux/weather/weatherSlice\";\r\nimport { useMemo } from \"react\";\r\nimport getDays from \"../../utils/getDays\";\r\n\r\nconst WeatherCard = ({\r\n  dt,\r\n  name,\r\n  weather,\r\n  main,\r\n  wind,\r\n  list,\r\n  city,\r\n  idx,\r\n  icon,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const weatherIcon = useMemo(() => getImage(weather), [weather]);\r\n  const listOfDays = useMemo(() => getDays(list), [list]);\r\n\r\n  const onClick = () => {\r\n    return dispatch(deleteCard(idx));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card key={dt}>\r\n        <img src={weatherIcon} alt=\"weather-icon\" width={100} />\r\n        <Temperature>{main?.temp.toFixed()}°C</Temperature>\r\n        <City>{city ? city : name}</City>\r\n        <Description main={main} wind={wind} />\r\n        <List>\r\n          {listOfDays.map(({ dt, main, weather }) => {\r\n            return (\r\n              <DailyCard\r\n                key={dt}\r\n                dt={dt}\r\n                main={main}\r\n                weather={weather}\r\n                list={list}\r\n              />\r\n            );\r\n          })}\r\n        </List>\r\n\r\n        {icon ? (\r\n          <Link onClick={onClick}>\r\n            <HiOutlineTrash size={25} />\r\n          </Link>\r\n        ) : null}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","export const selectList = (state) => state.weather.mainForecast;\r\nexport const selectCityList = (state) => state.weather.cityForecast;\r\nexport const selectCities = (state) => state.weather.cities;\r\nexport const selectMainCity = (state) => state.weather.mainCity;\r\nexport const selectIsError = (state) => state.weather.error;\r\n"],"names":["Card","styled","li","_templateObject","_taggedTemplateLiteral","Temperature","h2","_templateObject2","City","h3","_templateObject3","Link","a","_templateObject4","List","ul","_templateObject5","weather","specificPath","main","weatherIcon","clouds","drizzle","mist","humidity","snow","windIcon","days","dt","time","Date","getDay","_ref","useMemo","getImage","_jsx","_Fragment","children","_jsxs","alt","src","width","height","style","textAlign","temp","toFixed","getUserTime","Container","Content","Image","img","TextWrapper","div","Text","p","wind","speed","list","weatherForecast","_toConsumableArray","splice","length","getDays","forEach","_","index","array","_array$index","_array","push","name","city","idx","icon","dispatch","useDispatch","listOfDays","Description","map","_ref2","DailyCard","onClick","deleteCard","HiOutlineTrash","size","selectList","state","mainForecast","selectCityList","cityForecast","selectCities","cities"],"sourceRoot":""}