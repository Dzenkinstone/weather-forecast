{"version":3,"file":"static/js/963.195e042b.chunk.js","mappings":"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","sources":["components/WeatherCard/WeatherCard.styled.js","components/DailyCard/DailyCard.styled.js","utils/getImage.js","components/Pagination/Pagination.styled.js","components/Pagination/Pagination.js","components/DailyCard/DailyCard.js","components/Description/Description.styled.js","components/Description/Description.js","components/WeatherCard/WeatherCard.js","redux/weather/selectors.js"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Card = styled.div`\r\n  position: relative;\r\n  width: 580px;\r\n  padding: 40px 35px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  border-radius: 20px;\r\n\r\n  background: linear-gradient(135deg, #00feba, #5b548a);\r\n  color: #fff;\r\n`;\r\n\r\nexport const Temperature = styled.h2``;\r\n\r\nexport const City = styled.h3``;\r\n\r\nexport const Link = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: red;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n\r\n  &:hover {\r\n    transition: background-color 0.6s;\r\n    background-color: rgb(220, 20, 60);\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Card = styled.li`\r\n  margin: 15px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  background-color: grey;\r\n  border-radius: 20px;\r\n  padding: 20px;\r\n`;\r\n","import humidity from \"../images/humidity.png\";\r\nimport windIcon from \"../images/windIcon.png\";\r\nimport drizzle from \"../images/drizzle.png\";\r\nimport rain from \"../images/rain.png\";\r\nimport clouds from \"../images/clouds.png\";\r\nimport mist from \"../images/mist.png\";\r\nimport clear from \"../images/clear.png\";\r\nimport snow from \"../images/snow.png\";\r\n\r\nconst getImage = (weather) => {\r\n  const specificPath = weather && weather[0].main;\r\n  let weatherIcon = \"\";\r\n  if (specificPath === \"Clouds\") {\r\n    weatherIcon = clouds;\r\n  } else if (specificPath === \"Rain\") {\r\n    weatherIcon = rain;\r\n  } else if (specificPath === \"Clear\") {\r\n    weatherIcon = clear;\r\n  } else if (specificPath === \"Drizzle\") {\r\n    weatherIcon = drizzle;\r\n  } else if (specificPath === \"Mist\") {\r\n    weatherIcon = mist;\r\n  } else if (specificPath === \"Humidity\") {\r\n    weatherIcon = humidity;\r\n  } else if (specificPath === \"Snow\") {\r\n    weatherIcon = snow;\r\n  } else if (specificPath === \"Wind\") {\r\n    weatherIcon = windIcon;\r\n  }\r\n\r\n  return weatherIcon;\r\n};\r\n\r\nexport default getImage;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  display: inline-block;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  color: #000000;\r\n  float: left;\r\n  padding: 8px 16px;\r\n  text-decoration: none;\r\n  transition: background-color 0.5s;\r\n  border: 1px solid #ddd;\r\n  font-size: 14px;\r\n  background-color: ${(props) => {\r\n    return props.currentPage === props.page ? \"yellow\" : \"0000a3\";\r\n  }};\r\n\r\n  &:active {\r\n    background-color: #0096ff;\r\n    color: #ffffff;\r\n    border: 1px solid #0096ff;\r\n  }\r\n\r\n  &:hover:not(&:active) {\r\n    background-color: #ddd;\r\n  }\r\n`;\r\n","import { Button, List } from \"./Pagination.styled\";\r\n\r\nconst Pagination = ({ totalPosts, posts, setPage, page }) => {\r\n  let pages = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / posts); i += 1) {\r\n    pages.push(i);\r\n  }\r\n\r\n  return (\r\n    <List>\r\n      {pages.map((currentPage, index) => {\r\n        return (\r\n          <Button\r\n            currentPage={currentPage}\r\n            page={page}\r\n            onClick={() => setPage(currentPage)}\r\n            key={index}\r\n          >\r\n            {currentPage}\r\n          </Button>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import { Card, List } from \"./DailyCard.styled\";\r\n\r\nimport getImage from \"../../utils/getImage\";\r\nimport { Pagination } from \"../Pagination\";\r\nimport { useState } from \"react\";\r\n\r\nconst DailyCard = ({ list }) => {\r\n  const [page, setPage] = useState(1);\r\n  const weatherForecast = [...list].splice(1, list.length - 1);\r\n  const postsPerPage = 3;\r\n  const lastIndex = page * postsPerPage;\r\n  const firstIndex = lastIndex - postsPerPage;\r\n  const currentPost = weatherForecast.slice(firstIndex, lastIndex);\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        {currentPost.map(({ dt, dt_txt, main, weather }, index) => {\r\n          const weatherIcon = getImage(weather);\r\n          return (\r\n            <Card key={dt}>\r\n              <img\r\n                alt=\"weather-icon\"\r\n                src={weatherIcon}\r\n                width={30}\r\n                height={30}\r\n              />\r\n              <p style={{ textAlign: \"center\" }}>{main.temp.toFixed()}Â°C</p>\r\n              <p>{dt_txt}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </List>\r\n      <Pagination\r\n        totalPosts={weatherForecast.length}\r\n        posts={postsPerPage}\r\n        setPage={setPage}\r\n        page={page}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DailyCard;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.ul`\r\n  margin-top: 20px;\r\n  gap: 40px;\r\n  display: flex;\r\n`;\r\n\r\nexport const Content = styled.li`\r\n  display: flex;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport const TextWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Text = styled.p``;\r\n","import {\r\n  Container,\r\n  Content,\r\n  Image,\r\n  Text,\r\n  TextWrapper,\r\n} from \"./Description.styled\";\r\n\r\nimport humidity from \"../../images/humidity.png\";\r\nimport windIcon from \"../../images/windIcon.png\";\r\n\r\nconst Description = ({ main, wind }) => {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <Image src={humidity} width={30} height={30} />\r\n        <TextWrapper>\r\n          <Text>{main.humidity}%</Text>\r\n          <Text>ÐÐ¾Ð»Ð¾Ð³ÑÑÑÑ</Text>\r\n        </TextWrapper>\r\n      </Content>\r\n      <Content>\r\n        <Image src={windIcon} width={30} height={30} />\r\n        <TextWrapper>\r\n          <Text>{wind.speed} ÐºÐ¼/Ð³Ð¾Ð´</Text>\r\n          <Text>Ð¨Ð²Ð¸Ð´ÐºÑÑÑÑ Ð²ÑÑÑÑ</Text>\r\n        </TextWrapper>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import { HiOutlineTrash } from \"react-icons/hi\";\r\nimport { Card, City, Link, Temperature } from \"./WeatherCard.styled\";\r\nimport { DailyCard } from \"../DailyCard\";\r\nimport getImage from \"../../utils/getImage.js\";\r\nimport { Description } from \"../Description\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteCard } from \"../../redux/weather/weatherSlice\";\r\n\r\nconst WeatherCard = ({ currentWeather, list, city, idx, icon }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onClick = () => {\r\n    return dispatch(deleteCard(idx));\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      {currentWeather.map(({ dt, name, weather, main, wind }, index) => {\r\n        const weatherIcon = getImage(weather);\r\n        return (\r\n          <Card key={dt}>\r\n            <img src={weatherIcon} alt=\"weather-icon\" width={100} />\r\n            <Temperature>{main?.temp.toFixed()}Â°C</Temperature>\r\n            <City>{city ? city : name}</City>\r\n            <Description main={main} wind={wind} />\r\n            <DailyCard list={list} />\r\n            {icon ? (\r\n              <Link onClick={onClick}>\r\n                <HiOutlineTrash size={25} />\r\n              </Link>\r\n            ) : null}\r\n          </Card>\r\n        );\r\n      })}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","export const selectList = (state) => state.weather.mainForecast;\r\nexport const selectCityList = (state) => state.weather.cityForecast;\r\nexport const selectCities = (state) => state.weather.cities;\r\nexport const selectMainCity = (state) => state.weather.mainCity;\r\nexport const selectIsError = (state) => state.weather.error;\r\n"],"names":["Card","styled","div","_templateObject","_taggedTemplateLiteral","Temperature","h2","_templateObject2","City","h3","_templateObject3","Link","a","_templateObject4","List","ul","li","weather","specificPath","main","weatherIcon","clouds","drizzle","mist","humidity","snow","windIcon","Button","button","props","currentPage","page","_ref","totalPosts","posts","setPage","pages","i","Math","ceil","push","_jsx","children","map","index","onClick","list","_useState","useState","_useState2","_slicedToArray","weatherForecast","_toConsumableArray","splice","length","lastIndex","firstIndex","currentPost","slice","_jsxs","_Fragment","_ref2","dt","dt_txt","getImage","alt","src","width","height","style","textAlign","temp","toFixed","Pagination","Container","Content","Image","img","TextWrapper","Text","p","_templateObject5","wind","speed","currentWeather","city","idx","icon","dispatch","useDispatch","deleteCard","name","Description","DailyCard","HiOutlineTrash","size","selectList","state","mainForecast","selectCityList","cityForecast","selectCities","cities"],"sourceRoot":""}